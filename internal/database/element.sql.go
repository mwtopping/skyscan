// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: element.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createElement = `-- name: CreateElement :one
INSERT INTO ELEMENTS (
	id, satnum, name, created_at, updated_at, epoch, line1, line2
	)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	NOW(),
	NOW(),
	$3,
	$4,
	$5)
RETURNING id, satnum, name, created_at, updated_at, epoch, line1, line2
`

type CreateElementParams struct {
	Satnum int32
	Name   string
	Epoch  time.Time
	Line1  string
	Line2  string
}

func (q *Queries) CreateElement(ctx context.Context, arg CreateElementParams) (Element, error) {
	row := q.db.QueryRowContext(ctx, createElement,
		arg.Satnum,
		arg.Name,
		arg.Epoch,
		arg.Line1,
		arg.Line2,
	)
	var i Element
	err := row.Scan(
		&i.ID,
		&i.Satnum,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Epoch,
		&i.Line1,
		&i.Line2,
	)
	return i, err
}

const getElementWithEpoch = `-- name: GetElementWithEpoch :many
SELECT id, satnum, epoch from ELEMENTS
WHERE satnum=$1 AND epoch=$2
`

type GetElementWithEpochParams struct {
	Satnum int32
	Epoch  time.Time
}

type GetElementWithEpochRow struct {
	ID     uuid.UUID
	Satnum int32
	Epoch  time.Time
}

func (q *Queries) GetElementWithEpoch(ctx context.Context, arg GetElementWithEpochParams) ([]GetElementWithEpochRow, error) {
	rows, err := q.db.QueryContext(ctx, getElementWithEpoch, arg.Satnum, arg.Epoch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetElementWithEpochRow
	for rows.Next() {
		var i GetElementWithEpochRow
		if err := rows.Scan(&i.ID, &i.Satnum, &i.Epoch); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resetElements = `-- name: ResetElements :exec
DELETE FROM elements
`

func (q *Queries) ResetElements(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetElements)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transient.sql

package database

import (
	"context"
	"time"
)

const createTransient = `-- name: CreateTransient :one
INSERT INTO transients (id, created_at, updated_at, expstart, exptime, ra1, ra2, dec1, dec2)
VALUES (
	gen_random_uuid(),
	NOW(),
	NOW(),
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
RETURNING id, created_at, updated_at, expstart, exptime, ra1, ra2, dec1, dec2
`

type CreateTransientParams struct {
	Expstart time.Time
	Exptime  float64
	Ra1      float64
	Ra2      float64
	Dec1     float64
	Dec2     float64
}

func (q *Queries) CreateTransient(ctx context.Context, arg CreateTransientParams) (Transient, error) {
	row := q.db.QueryRowContext(ctx, createTransient,
		arg.Expstart,
		arg.Exptime,
		arg.Ra1,
		arg.Ra2,
		arg.Dec1,
		arg.Dec2,
	)
	var i Transient
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Expstart,
		&i.Exptime,
		&i.Ra1,
		&i.Ra2,
		&i.Dec1,
		&i.Dec2,
	)
	return i, err
}

const getSomeTransients = `-- name: GetSomeTransients :many
SELECT id, created_at, updated_at, expstart, exptime, ra1, ra2, dec1, dec2 from transients
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) GetSomeTransients(ctx context.Context, limit int32) ([]Transient, error) {
	rows, err := q.db.QueryContext(ctx, getSomeTransients, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transient
	for rows.Next() {
		var i Transient
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Expstart,
			&i.Exptime,
			&i.Ra1,
			&i.Ra2,
			&i.Dec1,
			&i.Dec2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
